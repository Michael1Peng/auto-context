# Task ID: 12
# Title: Implement Direct AI API Integration
# Status: deferred
# Dependencies: 10, 11
# Priority: low
# Description: Add direct integration with popular AI APIs for seamless context sharing without requiring intermediate files.
# Details:
Create an AIIntegrationManager to handle direct API integration with AI services:

```typescript
export interface AIServiceConfig {
  id: string;
  name: string;
  apiKey?: string;
  endpoint?: string;
  enabled: boolean;
}

export class AIIntegrationManager {
  private configManager: ConfigurationManager;
  private logger: Logger;
  private services: Map<string, AIServiceConfig> = new Map();
  
  constructor(configManager: ConfigurationManager, logger: Logger) {
    this.configManager = configManager;
    this.logger = logger;
    this.loadServices();
  }
  
  private loadServices(): void {
    const config = this.configManager.getConfig();
    // Load configured AI services
    const aiServices = config.aiServices || [];
    
    for (const service of aiServices) {
      this.services.set(service.id, service);
    }
  }
  
  public async sendContextToAI(files: FileData[]): Promise<void> {
    for (const [id, service] of this.services.entries()) {
      if (!service.enabled) continue;
      
      try {
        switch (id) {
          case 'openai':
            await this.sendToOpenAI(files, service);
            break;
          case 'anthropic':
            await this.sendToAnthropic(files, service);
            break;
          case 'cursor':
            await this.sendToCursor(files, service);
            break;
          default:
            this.logger.warn(`Unknown AI service: ${id}`);
        }
      } catch (error) {
        this.logger.error(`Failed to send context to ${service.name}`, error as Error);
      }
    }
  }
  
  private async sendToOpenAI(files: FileData[], config: AIServiceConfig): Promise<void> {
    // Implementation for OpenAI API integration
    // This would use the OpenAI API to store context
  }
  
  private async sendToAnthropic(files: FileData[], config: AIServiceConfig): Promise<void> {
    // Implementation for Anthropic API integration
  }
  
  private async sendToCursor(files: FileData[], config: AIServiceConfig): Promise<void> {
    // Implementation for Cursor API integration
  }
}
```

Implement integration with popular AI services including OpenAI, Anthropic, and Cursor. Use secure storage for API keys using VS Code's SecretStorage API. Add configuration options for API endpoints and authentication. Implement rate limiting and error handling for API requests. Add support for custom AI services through extension configuration.

# Test Strategy:
1. Test API integration with mock servers
2. Verify secure storage of API keys
3. Test error handling for various API failure scenarios
4. Verify rate limiting works correctly
5. Test with actual AI services in a controlled environment
