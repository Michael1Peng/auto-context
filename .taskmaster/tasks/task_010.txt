# Task ID: 10
# Title: Implement Multi-Output Support
# Status: done
# Dependencies: 4
# Priority: high
# Description: Enhance the extension to support generating multiple output files simultaneously with different formats for different AI systems.
# Details:
Extend the OutputFormatter to support multiple output formats and destinations:

```typescript
export interface OutputFormat {
  id: string;
  template: string;
  path: string;
  prependContent?: string;
  fileFormat?: 'json' | 'markdown' | 'text';
  maxFiles?: number;
  includeContent?: boolean;
}

export class OutputManager {
  private configManager: ConfigurationManager;
  private outputFormatter: OutputFormatter;
  private logger: Logger;
  
  constructor(configManager: ConfigurationManager, outputFormatter: OutputFormatter, logger: Logger) {
    this.configManager = configManager;
    this.outputFormatter = outputFormatter;
    this.logger = logger;
  }
  
  public async generateOutputs(files: FileData[]): Promise<void> {
    const config = this.configManager.getConfig();
    const formattedOutputs = this.outputFormatter.formatOutput(files);
    
    for (const [outputPath, content] of formattedOutputs.entries()) {
      try {
        // Ensure directory exists
        const dirPath = path.dirname(outputPath);
        if (!fs.existsSync(dirPath)) {
          fs.mkdirSync(dirPath, { recursive: true });
        }
        
        // Write output file
        await fs.promises.writeFile(outputPath, content, 'utf8');
        this.logger.info(`Generated output: ${outputPath}`);
      } catch (error) {
        this.logger.error(`Failed to write output to ${outputPath}`, error as Error);
      }
    }
  }
}
```

Implement support for different file formats including JSON, Markdown, and plain text. Add template variables for customizing output format. Support relative and absolute output paths. Add option to limit the number of files included in each output. Implement file content inclusion/exclusion options per output format.

# Test Strategy:
1. Test generation of multiple output files with different formats
2. Verify template variables are correctly substituted
3. Test with various output path configurations (relative, absolute)
4. Verify directory creation for output paths
5. Test error handling when writing to invalid locations
