# Task ID: 2
# Title: Implement Configuration Manager
# Status: done
# Dependencies: 1
# Priority: high
# Description: Develop a robust Configuration Manager to handle extension settings, validation, and real-time updates without requiring extension restart.
# Details:
Create a ConfigurationManager class that handles all configuration aspects:

```typescript
export interface ExtensionConfig {
  outputPaths: string[];
  formats: OutputFormat[];
  enableGitignore: boolean;
  includePinnedTabs: boolean;
  excludePatterns: string[];
}

export interface OutputFormat {
  id: string;
  template: string;
  path: string;
  prependContent?: string;
}

export class ConfigurationManager {
  private config: ExtensionConfig;
  private configChangeListener: vscode.Disposable;

  constructor() {
    this.config = this.loadConfiguration();
    this.setupConfigChangeListener();
  }

  private loadConfiguration(): ExtensionConfig {
    // Load from VS Code settings
  }

  private setupConfigChangeListener(): void {
    // Listen for configuration changes
    this.configChangeListener = vscode.workspace.onDidChangeConfiguration(e => {
      if (e.affectsConfiguration('autoCopilotContext')) {
        this.config = this.loadConfiguration();
        this.notifyConfigChanged();
      }
    });
  }

  private notifyConfigChanged(): void {
    // Notify subscribers of config changes
  }

  public getConfig(): ExtensionConfig {
    return this.config;
  }

  public validateConfig(): string[] {
    // Return array of validation errors
  }

  public dispose(): void {
    this.configChangeListener.dispose();
  }
}
```

Implement configuration validation to ensure all settings are valid before applying them. Use VS Code's configuration API (workspace.getConfiguration) for reading settings and provide sensible defaults for all options. Support workspace-specific configurations using scoped configuration.

# Test Strategy:
1. Test configuration loading with various input scenarios
2. Verify validation logic catches invalid configurations
3. Test real-time configuration updates
4. Ensure proper event emission when configuration changes
5. Test workspace vs user settings precedence
