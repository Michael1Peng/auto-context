# Task ID: 9
# Title: Implement Workspace-Specific Configurations
# Status: deferred
# Dependencies: 2
# Priority: medium
# Description: Add support for workspace-specific configurations to allow different settings for different projects.
# Details:
Enhance the Configuration Manager to support workspace-specific settings:

```typescript
export class ConfigurationManager {
  // ... existing code ...
  
  private loadConfiguration(): ExtensionConfig {
    const config = vscode.workspace.getConfiguration('autoCopilotContext');
    
    // Check if we have a workspace folder
    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
    
    // Load workspace-specific configuration file if it exists
    let workspaceConfig: Partial<ExtensionConfig> = {};
    if (workspaceFolder) {
      const configPath = path.join(workspaceFolder.uri.fsPath, '.vscode/auto-copilot-context.json');
      if (fs.existsSync(configPath)) {
        try {
          workspaceConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        } catch (error) {
          // Log error but continue with default config
        }
      }
    }
    
    // Merge configurations with workspace taking precedence
    return {
      outputPaths: workspaceConfig.outputPaths || config.get<string[]>('outputPaths', []),
      formats: workspaceConfig.formats || config.get<OutputFormat[]>('formats', []),
      enableGitignore: workspaceConfig.enableGitignore !== undefined ? 
        workspaceConfig.enableGitignore : config.get<boolean>('enableGitignore', true),
      includePinnedTabs: workspaceConfig.includePinnedTabs !== undefined ? 
        workspaceConfig.includePinnedTabs : config.get<boolean>('includePinnedTabs', true),
      excludePatterns: workspaceConfig.excludePatterns || config.get<string[]>('excludePatterns', [])
    };
  }
  
  // Add method to create default workspace config
  public createDefaultWorkspaceConfig(): void {
    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
    if (!workspaceFolder) {
      return;
    }
    
    const vscodeDir = path.join(workspaceFolder.uri.fsPath, '.vscode');
    const configPath = path.join(vscodeDir, 'auto-copilot-context.json');
    
    // Create .vscode directory if it doesn't exist
    if (!fs.existsSync(vscodeDir)) {
      fs.mkdirSync(vscodeDir);
    }
    
    // Don't overwrite existing config
    if (fs.existsSync(configPath)) {
      return;
    }
    
    // Create default config
    const defaultConfig: ExtensionConfig = {
      outputPaths: ['.vscode/copilot-context.json'],
      formats: [
        {
          id: 'json',
          template: '{"files": {{files}}}',
          path: '.vscode/copilot-context.json'
        }
      ],
      enableGitignore: true,
      includePinnedTabs: true,
      excludePatterns: ['**/.git/**', '**/node_modules/**']
    };
    
    fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
  }
}
```

Implement a command to create a default workspace configuration file. Add support for multiple workspace folders. Provide schema validation for workspace configuration files. Add documentation for workspace configuration options.

# Test Strategy:
1. Test loading of workspace-specific configuration files
2. Verify correct merging of workspace and user settings
3. Test creation of default workspace configuration
4. Verify configuration changes are detected in workspace files
5. Test with multiple workspace folders to ensure correct behavior
