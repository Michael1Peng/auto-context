<context>
# 概述  
Auto Copilot Context 是一个 Visual Studio Code 扩展，旨在自动跟踪和导出打开文件的内容，为 AI 系统提供相关的代码辅助上下文。该扩展监控文件变化，遵循 gitignore 规则，并输出可被 Cursor、Copilot 和其他 LLM 等 AI 编码助手使用的格式化内容。这解决了手动为 AI 系统提供上下文的问题，确保它们始终拥有用户当前工作文件的最新信息。

# 核心功能  
1. **自动上下文跟踪**：实时监控 VS Code 文件变化和打开的标签页
2. **多种输出格式**：支持为不同 AI 系统配置的输出格式
3. **Gitignore 集成**：遵循 .gitignore 规则以避免包含不需要的文件
4. **固定标签页管理**：可选择包含或排除固定标签页的上下文
5. **多输出支持**：可同时生成多个不同格式的输出文件
6. **文件过滤**：智能过滤以排除无关文件（未命名、已关闭、输出文件）
7. **模板系统**：可自定义的输出模板，支持变量替换

# 用户体验  
**主要用户画像**：使用 AI 编码助手并希望无缝上下文共享的开发者
**关键用户流程**：
1. 安装扩展 → 配置输出设置 → 启用自动输出 → AI 自动获取上下文
2. 打开/关闭文件 → 扩展跟踪变化 → 更新上下文文件 → AI 获得最新上下文
3. 配置自定义输出格式 → 扩展适应不同 AI 系统需求

**UI/UX 考虑因素**：
- 最小化 UI 占用 - 在后台透明工作
- 通过 VS Code 设置进行配置
- 问题的错误通知
- 命令面板集成用于手动操作
</context>

<PRD>
# 技术架构  
**系统组件**：
- ContextTracker：管理文件监控和输出生成的核心类
- Configuration Manager：处理扩展设置和验证
- File Filter System：Gitignore 集成和文件验证
- Output Formatter：模板处理和多格式支持

**数据模型**：
- FileData：{ filePath: string, content: string }
- ExtensionConfig：输出路径、格式、标志
- OutputConfiguration：路径、格式模板、前置内容

**API 和集成**：
- VS Code Extension API 用于文件监控
- 文件系统 API 用于读写
- Gitignore 解析器用于文件过滤
- VS Code 配置 API

**基础设施要求**：
- VS Code 1.84.0+ 兼容性
- Node.js/TypeScript 运行时
- Webpack 打包分发

# 开发路线图  
**第一阶段 - MVP 增强**（当前状态改进）：
- 重构现有代码库以提高可维护性
- 改进错误处理和日志记录
- 添加全面的单元测试
- 修复配置重载问题
- 增强文件过滤逻辑

**第二阶段 - 高级功能**：
- 添加无需重启的实时配置更新
- 实现文件内容缓存以提高性能
- 添加工作区特定配置
- 支持自定义文件扩展名和模式
- 添加手动上下文刷新命令

**第三阶段 - AI 集成功能**：
- 与流行 AI API 直接集成
- 智能上下文窗口管理
- 语义文件优先级排序
- 上下文历史和版本控制
- 性能分析和优化

**第四阶段 - 企业功能**：
- 团队共享能力
- 高级安全和隐私控制
- 大型代码库的可扩展性改进
- 与流行开发工作流的集成

# 逻辑依赖链
**基础（第一阶段）**：
1. 代码重构和清理 - 建立可维护的基础
2. 配置系统改革 - 实现可靠的设置管理
3. 文件监控改进 - 确保准确的上下文跟踪
4. 输出格式增强 - 提供灵活的 AI 集成

**核心功能（第二阶段）**：
5. 实时更新 - 需要第一阶段的稳定基础
6. 性能优化 - 基于改进的文件监控
7. 高级过滤 - 扩展基本文件过滤能力
8. 命令面板集成 - 需要稳定的核心功能

**高级功能（第三阶段）**：
9. AI API 集成 - 需要强大的输出格式化
10. 智能上下文管理 - 基于性能优化
11. 语义分析 - 需要稳定的文件处理管道
12. 分析 - 需要所有核心功能稳定

# 风险和缓解措施  
**技术挑战**：
- 风险：对大型代码库的性能影响
- 缓解：实现文件内容缓存和延迟加载

- 风险：用户配置复杂性
- 缓解：提供合理的默认值和配置向导

**MVP 重点**：
- 优先考虑可靠性而非功能
- 确保与现有配置的向后兼容性
- 专注于核心用例：为 AI 系统提供自动上下文

**资源约束**：
- 使用现有 VS Code API 以最小化依赖
- 利用 TypeScript 实现类型安全和可维护性
- 实施渐进式改进而非完全重写

# 附录  
**技术规范**：
- 目标：VS Code Extension Marketplace
- 语言：TypeScript
- 构建：Webpack
- 测试：Mocha 框架
- 包管理器：pnpm

**研究发现**：
- 当前代码库具有基本功能但需要架构改进
- 多输出支持部分实现但需要增强
- 错误处理和用户反馈需要显著改进
- 大型工作区的性能考虑尚未完全解决
</PRD> 
