# Auto Copilot Context - 多工作区输出支持

## 概述
Auto Copilot Context 是一个 VS Code 扩展，自动跟踪打开文件并输出上下文给 AI 系统。当前需要支持多工作区环境下的输出功能。

## 核心问题
当前插件在 code-workspace 环境下只能输出到第一个工作区目录，需要支持输出到所有配置的工作区目录。

## 用户故事

### 故事1：多工作区输出支持
**作为** 使用 code-workspace 的开发者  
**我希望** 插件能将上下文文件输出到所有工作区目录中  
**这样** 每个工作区的 AI 助手都能获得相同的上下文信息  

**验收标准：**
- 检测当前是否为 code-workspace 环境
- 将配置的输出文件写入到每个工作区目录
- 保持单工作区环境的向后兼容性

### 故事2：窗口关闭时清理文件
**作为** 开发者  
**我希望** 在关闭 VS Code 窗口时自动删除输出的上下文文件  
**这样** 避免留下过期的上下文文件  

**验收标准：**
- 监听窗口关闭事件
- 删除所有已输出的上下文文件
- 只删除插件创建的文件，不影响其他文件

## 技术需求

### 当前配置示例
```json
{
  "folders": [
    {
      "name": "root",
      "path": "."
    },
    {
      "name": "llm-prompts", 
      "path": "/Users/Shared/repositories/llm-prompts"
    }
  ],
  "settings": {
    "autoContext.outputList": [
      {
        "path": "output/example.xml",
        "format": "<Opened Files>\n<File Name>\n${fileName}\n</File Name>\n<File Content>\n${content}\n</File Content>\n</Opened Files>\n"
      },
      {
        "path": ".cursor/rules/example.mdc", 
        "format": "...",
        "prependContent": "---\ndescription: \nglobs: \nalwaysApply: true\n---"
      }
    ],
    "autoContext.shouldOutput": true
  }
}
```

### 期望行为
1. **多工作区检测**：使用 `vscode.workspace.workspaceFolders` 检测多工作区环境
2. **多目录输出**：将每个 outputList 项目输出到所有工作区目录
3. **路径解析**：相对路径相对于每个工作区根目录解析
4. **文件清理**：窗口关闭时删除所有输出文件

### 核心实现
```typescript
// 检测多工作区
const workspaceFolders = vscode.workspace.workspaceFolders || [];
const isMultiWorkspace = workspaceFolders.length > 1;

// 为每个工作区生成输出路径
if (isMultiWorkspace) {
  workspaceFolders.forEach(folder => {
    const outputPath = path.join(folder.uri.fsPath, config.path);
    // 写入文件
  });
} else {
  // 单工作区逻辑保持不变
}

// 窗口关闭时清理
vscode.window.onDidCloseTerminal(() => {
  // 删除输出文件
});
```

## 技术约束
- 保持向后兼容性
- 使用现有 VS Code API
- 不修改现有配置格式
- 错误隔离：单个工作区失败不影响其他工作区
